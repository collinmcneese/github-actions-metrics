var R=Object.create;var p=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var y=(e,o,a,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let n of S(o))!x.call(e,n)&&n!==a&&p(e,n,{get:()=>o[n],enumerable:!(t=O(o,n))||t.enumerable});return e};var f=(e,o,a)=>(a=e!=null?R(T(e)):{},y(o||!e||!e.__esModule?p(a,"default",{value:e,enumerable:!0}):a,e));var l=f(require("express"),1);var m=f(require("express"),1),E=require("@opensearch-project/opensearch"),w=m.default.Router(),D=`${process.env.OPENSEARCH_HOST}`,P=`${process.env.OPENSEARCH_PROTOCOL}`,$=`${process.env.OPENSEARCH_PORT}`,A=`${process.env.OPENSEARCH_USERNAME}:${process.env.OPENSEARCH_PASSWORD}`,h=new E.Client({nodes:`${P}://${A}@${D}:${$}`.replace(/"/g,""),ssl:{rejectUnauthorized:!1}});w.get("/",(e,o)=>{o.send("Server is running")});async function u({start:e,end:o}){let a=await(o-e)/1e3;return a=Math.max(1,Math.ceil(a)),a}async function q(e){return await h.search({index:"workflow_job",body:{query:{bool:{must:[{match:{action:"queued"}},{match:{"workflow_job.id":e.workflow_job.id}},{match:{"workflow_job.run_id":e.workflow_job.run_id}}]}}}})}w.post("/",async(e,o)=>{try{let a=e.headers["x-github-delivery"],t=e.body,n;if(t.workflow_run?n="workflow_run":t.workflow_job&&(n="workflow_job"),n==="workflow_run"){let i=await new Date(t.workflow_run.created_at),c=await new Date(t.workflow_run.updated_at);t.action==="completed"?t.duration=await u({start:i,end:c}):t.duration}if(t["@timestamp"]=new Date().toISOString(),n==="workflow_job"){let i=await new Date(t.workflow_job.started_at),c=await new Date(t.workflow_job.completed_at);if(t.action=="in_progress",t.action==="completed"){console.log("setting duration"),t.duration=await u({start:i,end:c});let _=await q(t);if(_.body.hits.total.value>0){let s=await new Date(_.body.hits.hits[0]._source["@timestamp"]),r=await(i-s)/1e3;r=Math.max(1,Math.ceil(r)),console.log(`queueDuration: ${r}`),t.queue_duration=r}let g=t.workflow_job.steps;for(let s of g){let r=await new Date(s.started_at),j=await new Date(s.completed_at);s.duration=await u({start:r,end:j})}}else t.duration}let v=await h.index({id:a,index:n,body:t});o.send(v)}catch(a){console.error(a),o.status}});var b={router:w};var k;console.log(`TARGET_TYPE: ${process.env.TARGET_TYPE}`);process.env.TARGET_TYPE==="opensearch"&&(k=b.router);var d=(0,l.default)();d.use(l.default.json());d.use(k);d.listen(3e3,()=>{console.log("Forwarding server listening on port 3000")});
